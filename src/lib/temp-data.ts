import { Questions } from '@/types/questions';

export const mockQuestions: Questions = [
    {
        id: 1,
        name: 'Fair Distribution of Cookies',
        difficulty: 'Medium',
        timeElapsed: 63000,
        notes: 'This works!!',
        tags: [
            { name: 'sorting' },
            { name: 'array' },
            { name: 'greedy' },
            { name: 'dynamic programming' },
            { name: 'bitmasking' },
        ],
        dateCompleted: new Date(),
    },
    {
        id: 2,
        name: 'Valid Sudoku',
        difficulty: 'Medium',
        timeElapsed: 539000,
        notes: '',
        tags: [
            { name: 'array' },
            { name: 'backtracking' },
            { name: 'recursion' },
        ],
        dateCompleted: new Date(),
    },
    {
        id: 3,
        name: 'Validate Binary Search Tree',
        difficulty: 'Medium',
        timeElapsed: 965000,
        notes: 'Cool solution.',
        tags: [
            { name: 'binary tree' },
            { name: 'depth first search' },
            { name: 'breadth first search' },
            { name: 'sorting' },
        ],
        dateCompleted: new Date(),
    },
    {
        id: 4,
        name: 'Group Anagrams',
        difficulty: 'Medium',
        timeElapsed: 21000,
        notes: '',
        tags: [{ name: 'array' }, { name: 'string' }, { name: 'hashmap' }],
        dateCompleted: new Date(),
    },
    {
        id: 5,
        name: 'Two Sum',
        difficulty: 'Easy',
        timeElapsed: 0,
        notes: 'Two sum very cool. This is a very long description that I am using to limit test the size of each row, hopefully it does not look too crazy otherwise I am going to have to do some styling to make it work which i do not want to do because styling things is kind of boring the logic of frontend stuff is wayyyy more interesting you know what I mean?',
        tags: [{ name: 'hashmap' }, { name: 'array' }],
        dateCompleted: new Date(),
    },
    {
        id: 6,
        name: 'Merge Two Sorted Lists',
        difficulty: 'Hard',
        timeElapsed: 300020,
        notes: '',
        tags: [{ name: 'array' }, { name: 'sorting' }],
        dateCompleted: new Date(),
    },
    {
        id: 7,
        name: 'New Question 1',
        difficulty: 'Easy',
        timeElapsed: 45000,
        notes: 'Some notes for this question.',
        tags: [{ name: 'array' }, { name: 'hashmap' }],
        dateCompleted: new Date(),
    },
    {
        id: 8,
        name: 'New Question 2',
        difficulty: 'Hard',
        timeElapsed: 720000,
        notes: 'Notes for the second new question.',
        tags: [{ name: 'sorting' }, { name: 'greedy' }],
        dateCompleted: new Date(),
    },
    // Add more entries to reach a total of 15
    {
        id: 9,
        name: 'New Question 3',
        difficulty: 'Medium',
        timeElapsed: 240000,
        notes: 'Notes for the third new question.',
        tags: [{ name: 'array' }, { name: 'recursion' }],
        dateCompleted: new Date(),
    },
    {
        id: 10,
        name: 'New Question 4',
        difficulty: 'Medium',
        timeElapsed: 600000,
        notes: 'Notes for the fourth new question.',
        tags: [{ name: 'array' }, { name: 'backtracking' }],
        dateCompleted: new Date(),
    },
    {
        id: 11,
        name: 'New Question 5',
        difficulty: 'Easy',
        timeElapsed: 15000,
        notes: 'Notes for the fifth new question.',
        tags: [{ name: 'hashmap' }, { name: 'array' }],
        dateCompleted: new Date(),
    },
    {
        id: 12,
        name: 'New Question 6',
        difficulty: 'Medium',
        timeElapsed: 360000,
        notes: 'Notes for the sixth new question.',
        tags: [{ name: 'binary tree' }, { name: 'depth first search' }],
        dateCompleted: new Date(),
    },
    {
        id: 13,
        name: 'New Question 7',
        difficulty: 'Hard',
        timeElapsed: 900000,
        notes: 'Notes for the seventh new question.',
        tags: [{ name: 'sorting' }, { name: 'dynamic programming' }],
        dateCompleted: new Date(),
    },
    {
        id: 14,
        name: 'New Question 8',
        difficulty: 'Medium',
        timeElapsed: 420000,
        notes: 'Notes for the eighth new question.',
        tags: [{ name: 'array' }, { name: 'string' }],
        dateCompleted: new Date(),
    },
    {
        id: 15,
        name: 'New Question 9',
        difficulty: 'Easy',
        timeElapsed: 30000,
        notes: 'Notes for the ninth new question.',
        tags: [{ name: 'hashmap' }, { name: 'recursion' }],
        dateCompleted: new Date(),
    },
];
